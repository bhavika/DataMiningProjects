1. Using KMeans_naive with euclidean distance gives me 147 entries and 0.48 on leaderboard
2. Using KMeans_naive with cosine distance gives 147 entries and 0.60 on leaderboard (always subtract cosine similarity from 1)
3. KMeans with Manhattan distance gives the worst results

4. KMeans with PCA where components  = 5 is in file predictions/kmeans_pca_1.txt, gives 0.18 on leaderboard.
5. KMeans with PCA where components  = 10 is in file predictions/kmeans_pca_2.txt, gives 0.34 on leaderboard
6. KMeans with PCA where components = 20 is in file predictions/kmeans_pca_3.txt, gives 0.29 on leaderboard
7. KMeans with PCA where components = 2 is in file predictions/kmeans_pca_4.txt, gives 0.18 on leaderboard
8. KMeans with SVD where components = 5 is in file predictions/kmeans_svd_5_norm.txt gives 0.34 on leaderboard
9. KMeans with SVD where components = 10 is in file predictions/kmeans_svd_10_norm.txt gives




Distribution of clusters - trial 1, iter=100
Size : 1223
Size : 300
Size : 1736
Size : 114
Size : 3329
Size : 437
Size : 1417
Total: 8556

Trial 2, iter = 300
Size : 3166
Size : 1051
Size : 1766
Size : 1400
Size : 428
Size : 114
Size : 631
Total: 8556

Trial 3, iter = 300
Size : 1051
Size : 3203
Size : 486
Size : 1767
Size : 1225
Size : 189
Size : 635
Total: 8556



10/22 and 10/23

1) kmeans_2.txt contains the output of 10-component PCA from a pickled model and kmeans_text.py : 0.55 (best score yet)
2) kmeans_3.txt contains the output of 10-component PCA from a pickled model and kmeans_text.py after refactoring. TFIDF is now with smooth idf. CHECK SCORE ON MINER
3) kmeans_iris_3 output of Iris - trying to shuffle

